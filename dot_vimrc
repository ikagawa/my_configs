"======================================================================
scriptencoding utf-8
set nocompatible

if has('vim_starting')
  filetype plugin off
  filetype indent off
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#begin(expand('~/.vim/bundle/'))
endif

NeoBundle 'Shougo/neobundle.vim'
NeoBundle 'ctrlp.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'mattn/emmet-vim'
" Enterキーで良い感じにテキストを選択してくれるプラグイン
"NeoBundle 'gcmt/wildfire.vim'
NeoBundle 'vcscommand.vim'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'godlygeek/tabular'

NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'kannokanno/previm'
NeoBundle 'tyru/open-browser.vim'

"NeoBundle 'marcus/rsense'
"NeoBundle 'supermomonga/neocomplete-rsense.vim'

" ドキュメント参照
NeoBundle 'thinca/vim-ref'
NeoBundle 'yuku-t/vim-ref-ri'

" メソッド定義元へのジャンプ
NeoBundle 'szw/vim-tags'

" 自動で閉じる
NeoBundle 'tpope/vim-endwise'

" 環境変数RSENSE_HOMEに'/usr/local/bin/rsense'を指定しても動く
"let g:neocomplete#sources#rsense#home_directory = '/home/ikagawa/.rbenv/shims/rsense'

"let g:rsenseUseOmniFunc = 1

NeoBundle "osyo-manga/vim-monster"

" Use neocomplete.vim
let g:neocomplete#sources#omni#input_patterns = {
 \   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
 \}

" ステータスラインの表示内容強化
NeoBundle 'itchyny/lightline.vim'

" カラースキームmolokai
NeoBundle 'tomasr/molokai'

" Snippet
NeoBundle 'Shougo/neocomplete.vim'
"NeoBundle 'Shougo/neocomplcache'
"NeoBundle 'Shougo/neosnippet'
"NeoBundle 'Shougo/neosnippet-snippets'

call neobundle#end()

syntax on
filetype plugin on
filetype indent on

" SSH クライアントの設定によってはマウスが使える（putty だと最初からいける）
set mouse=n

nmap <F9> :NERDTreeToggle<cr>

source $VIMRUNTIME/macros/matchit.vim

"======================================================================
"colorscheme mrkn256
colorscheme desert
set ai
set ts=4
set sw=4
set smartindent
set expandtab
set nocp
set laststatus=2
set cmdheight=2
set showcmd
set title
set statusline=%<%f\ %m%r%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l/%L,%v
set fileencodings=utf-8,iso-2022-jp,cp932,japan
set hlsearch
set backspace=indent
set nowrap
set nofoldenable
" 全角記号を使った時におかしくならないように設定
set ambiwidth=double

" jquery.vim
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery

" grでカーソル下のキーワードをvimgrep
nnoremap <expr> gr ':vimgrep ;\<' . expand('<cword>') . '\>; **/* \| cw'

"----------------------------------------------------------
" vim-quickrun
" @see http://d.hatena.ne.jp/ruedap/20110225/vim_php_phpunit_quickrun
"----------------------------------------------------------                                                                                                                                      
augroup QuickRunPHPUnit
  autocmd!
  autocmd BufWinEnter,BufNewFile *test.php set filetype=php.unit
  autocmd BufWinEnter,BufNewFile *Test.php set filetype=php.unit
augroup END
" 初期化
let g:quickrun_config = {}
"  PHPUnit
let g:quickrun_config['php.unit'] = {'command': 'phpunit'}

set runtimepath+=~/.vim/vimdoc-ja
set helplang=ja,en

set tags=tags,~/.tags,~/project/TPAP/htdocs/SPEASIC/.tags

autocmd QuickFixCmdPost *grep* cwindow

let g:syntastic_javascript_checkers = ['eslint']

let g:syntastic_php_phpmd_post_args='codesize,design,unusedcode'
let g:syntastic_php_phpcs_args = '--report=csv --standard=PSR2'

let g:loaded_syntastic_php_php_checker = 1
let g:loaded_syntastic_php_phplint_checker = 1
let g:loaded_syntastic_php_phpcs_checker = 1
let g:loaded_syntastic_php_phpmd_checker = 1

"let g:user_emmet_settings = {'indentation': '  '}
"map <F2> <C-Y>,

au BufRead,BufNewFile *.md set filetype=markdown
"au BufRead,BufNewFile *.twig set filetype=htmljinja
au BufRead,BufNewFile *.twig set filetype=html
au BufRead,BufNewFile *.php set tags+=$HOME/project/invoice/vendor/vendor.tags

"----------------------------------------------------------
"" lightline.vimの設定
"----------------------------------------------------------
set showmode " 現在のモードを表示
set ruler " ステータスラインの右側にカーソルの位置を表示する

"----------------------------------------------------------
" neocompele
"----------------------------------------------------------
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
